// Code generated by mockery v2.14.0. DO NOT EDIT.

package mock

import (
	context "context"

	food "github.com/dietdoctor/be-test/pkg/food/v1"
	mock "github.com/stretchr/testify/mock"
)

// OrderService is an autogenerated mock type for the OrderService type
type OrderService struct {
	mock.Mock
}

type OrderService_Expecter struct {
	mock *mock.Mock
}

func (_m *OrderService) EXPECT() *OrderService_Expecter {
	return &OrderService_Expecter{mock: &_m.Mock}
}

// GetOrder provides a mock function with given fields: ctx, orderName
func (_m *OrderService) GetOrder(ctx context.Context, orderName string) (*food.Order, error) {
	ret := _m.Called(ctx, orderName)

	var r0 *food.Order
	if rf, ok := ret.Get(0).(func(context.Context, string) *food.Order); ok {
		r0 = rf(ctx, orderName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*food.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderService_GetOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrder'
type OrderService_GetOrder_Call struct {
	*mock.Call
}

// GetOrder is a helper method to define mock.On call
//  - ctx context.Context
//  - orderName string
func (_e *OrderService_Expecter) GetOrder(ctx interface{}, orderName interface{}) *OrderService_GetOrder_Call {
	return &OrderService_GetOrder_Call{Call: _e.mock.On("GetOrder", ctx, orderName)}
}

func (_c *OrderService_GetOrder_Call) Run(run func(ctx context.Context, orderName string)) *OrderService_GetOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OrderService_GetOrder_Call) Return(_a0 *food.Order, _a1 error) *OrderService_GetOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ListOrders provides a mock function with given fields: ctx, status
func (_m *OrderService) ListOrders(ctx context.Context, status food.Order_Status) ([]*food.Order, error) {
	ret := _m.Called(ctx, status)

	var r0 []*food.Order
	if rf, ok := ret.Get(0).(func(context.Context, food.Order_Status) []*food.Order); ok {
		r0 = rf(ctx, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*food.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, food.Order_Status) error); ok {
		r1 = rf(ctx, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderService_ListOrders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOrders'
type OrderService_ListOrders_Call struct {
	*mock.Call
}

// ListOrders is a helper method to define mock.On call
//  - ctx context.Context
//  - status food.Order_Status
func (_e *OrderService_Expecter) ListOrders(ctx interface{}, status interface{}) *OrderService_ListOrders_Call {
	return &OrderService_ListOrders_Call{Call: _e.mock.On("ListOrders", ctx, status)}
}

func (_c *OrderService_ListOrders_Call) Run(run func(ctx context.Context, status food.Order_Status)) *OrderService_ListOrders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(food.Order_Status))
	})
	return _c
}

func (_c *OrderService_ListOrders_Call) Return(_a0 []*food.Order, _a1 error) *OrderService_ListOrders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateOrder provides a mock function with given fields: ctx, orderName, status
func (_m *OrderService) UpdateOrder(ctx context.Context, orderName string, status food.Order_Status) error {
	ret := _m.Called(ctx, orderName, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, food.Order_Status) error); ok {
		r0 = rf(ctx, orderName, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderService_UpdateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrder'
type OrderService_UpdateOrder_Call struct {
	*mock.Call
}

// UpdateOrder is a helper method to define mock.On call
//  - ctx context.Context
//  - orderName string
//  - status food.Order_Status
func (_e *OrderService_Expecter) UpdateOrder(ctx interface{}, orderName interface{}, status interface{}) *OrderService_UpdateOrder_Call {
	return &OrderService_UpdateOrder_Call{Call: _e.mock.On("UpdateOrder", ctx, orderName, status)}
}

func (_c *OrderService_UpdateOrder_Call) Run(run func(ctx context.Context, orderName string, status food.Order_Status)) *OrderService_UpdateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(food.Order_Status))
	})
	return _c
}

func (_c *OrderService_UpdateOrder_Call) Return(_a0 error) *OrderService_UpdateOrder_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewOrderService interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrderService creates a new instance of OrderService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrderService(t mockConstructorTestingTNewOrderService) *OrderService {
	mock := &OrderService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
