// Code generated by mockery v2.14.0. DO NOT EDIT.

package mock

import (
	context "context"

	food "github.com/dietdoctor/be-test/pkg/food/v1"
	mock "github.com/stretchr/testify/mock"
)

// KitchenService is an autogenerated mock type for the KitchenService type
type KitchenService struct {
	mock.Mock
}

type KitchenService_Expecter struct {
	mock *mock.Mock
}

func (_m *KitchenService) EXPECT() *KitchenService_Expecter {
	return &KitchenService_Expecter{mock: &_m.Mock}
}

// CreateKitchenOrder provides a mock function with given fields: ctx, orderName
func (_m *KitchenService) CreateKitchenOrder(ctx context.Context, orderName string) (*food.KitchenOrder, error) {
	ret := _m.Called(ctx, orderName)

	var r0 *food.KitchenOrder
	if rf, ok := ret.Get(0).(func(context.Context, string) *food.KitchenOrder); ok {
		r0 = rf(ctx, orderName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*food.KitchenOrder)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KitchenService_CreateKitchenOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateKitchenOrder'
type KitchenService_CreateKitchenOrder_Call struct {
	*mock.Call
}

// CreateKitchenOrder is a helper method to define mock.On call
//  - ctx context.Context
//  - orderName string
func (_e *KitchenService_Expecter) CreateKitchenOrder(ctx interface{}, orderName interface{}) *KitchenService_CreateKitchenOrder_Call {
	return &KitchenService_CreateKitchenOrder_Call{Call: _e.mock.On("CreateKitchenOrder", ctx, orderName)}
}

func (_c *KitchenService_CreateKitchenOrder_Call) Run(run func(ctx context.Context, orderName string)) *KitchenService_CreateKitchenOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *KitchenService_CreateKitchenOrder_Call) Return(_a0 *food.KitchenOrder, _a1 error) *KitchenService_CreateKitchenOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetKitchenOrder provides a mock function with given fields: ctx, orderName
func (_m *KitchenService) GetKitchenOrder(ctx context.Context, orderName string) (*food.KitchenOrder, error) {
	ret := _m.Called(ctx, orderName)

	var r0 *food.KitchenOrder
	if rf, ok := ret.Get(0).(func(context.Context, string) *food.KitchenOrder); ok {
		r0 = rf(ctx, orderName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*food.KitchenOrder)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KitchenService_GetKitchenOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKitchenOrder'
type KitchenService_GetKitchenOrder_Call struct {
	*mock.Call
}

// GetKitchenOrder is a helper method to define mock.On call
//  - ctx context.Context
//  - orderName string
func (_e *KitchenService_Expecter) GetKitchenOrder(ctx interface{}, orderName interface{}) *KitchenService_GetKitchenOrder_Call {
	return &KitchenService_GetKitchenOrder_Call{Call: _e.mock.On("GetKitchenOrder", ctx, orderName)}
}

func (_c *KitchenService_GetKitchenOrder_Call) Run(run func(ctx context.Context, orderName string)) *KitchenService_GetKitchenOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *KitchenService_GetKitchenOrder_Call) Return(_a0 *food.KitchenOrder, _a1 error) *KitchenService_GetKitchenOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewKitchenService interface {
	mock.TestingT
	Cleanup(func())
}

// NewKitchenService creates a new instance of KitchenService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewKitchenService(t mockConstructorTestingTNewKitchenService) *KitchenService {
	mock := &KitchenService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
