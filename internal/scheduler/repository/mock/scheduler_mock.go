// Code generated by mockery v2.14.0. DO NOT EDIT.

package mock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "github.com/ttagiyeva/scheduler/internal/scheduler/domain"
)

// Scheduler is an autogenerated mock type for the Scheduler type
type Scheduler struct {
	mock.Mock
}

type Scheduler_Expecter struct {
	mock *mock.Mock
}

func (_m *Scheduler) EXPECT() *Scheduler_Expecter {
	return &Scheduler_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, orderName
func (_m *Scheduler) Delete(ctx context.Context, orderName string) error {
	ret := _m.Called(ctx, orderName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, orderName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Scheduler_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Scheduler_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//  - ctx context.Context
//  - orderName string
func (_e *Scheduler_Expecter) Delete(ctx interface{}, orderName interface{}) *Scheduler_Delete_Call {
	return &Scheduler_Delete_Call{Call: _e.mock.On("Delete", ctx, orderName)}
}

func (_c *Scheduler_Delete_Call) Run(run func(ctx context.Context, orderName string)) *Scheduler_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Scheduler_Delete_Call) Return(_a0 error) *Scheduler_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

// Get provides a mock function with given fields: ctx, orderName
func (_m *Scheduler) Get(ctx context.Context, orderName string) (*domain.Scheduler, error) {
	ret := _m.Called(ctx, orderName)

	var r0 *domain.Scheduler
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Scheduler); ok {
		r0 = rf(ctx, orderName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Scheduler)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Scheduler_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Scheduler_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//  - ctx context.Context
//  - orderName string
func (_e *Scheduler_Expecter) Get(ctx interface{}, orderName interface{}) *Scheduler_Get_Call {
	return &Scheduler_Get_Call{Call: _e.mock.On("Get", ctx, orderName)}
}

func (_c *Scheduler_Get_Call) Run(run func(ctx context.Context, orderName string)) *Scheduler_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Scheduler_Get_Call) Return(_a0 *domain.Scheduler, _a1 error) *Scheduler_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetQueried provides a mock function with given fields: ctx, path, op, value
func (_m *Scheduler) GetQueried(ctx context.Context, path string, op string, value interface{}) ([]*domain.Scheduler, error) {
	ret := _m.Called(ctx, path, op, value)

	var r0 []*domain.Scheduler
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}) []*domain.Scheduler); ok {
		r0 = rf(ctx, path, op, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Scheduler)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, interface{}) error); ok {
		r1 = rf(ctx, path, op, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Scheduler_GetQueried_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQueried'
type Scheduler_GetQueried_Call struct {
	*mock.Call
}

// GetQueried is a helper method to define mock.On call
//  - ctx context.Context
//  - path string
//  - op string
//  - value interface{}
func (_e *Scheduler_Expecter) GetQueried(ctx interface{}, path interface{}, op interface{}, value interface{}) *Scheduler_GetQueried_Call {
	return &Scheduler_GetQueried_Call{Call: _e.mock.On("GetQueried", ctx, path, op, value)}
}

func (_c *Scheduler_GetQueried_Call) Run(run func(ctx context.Context, path string, op string, value interface{})) *Scheduler_GetQueried_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(interface{}))
	})
	return _c
}

func (_c *Scheduler_GetQueried_Call) Return(_a0 []*domain.Scheduler, _a1 error) *Scheduler_GetQueried_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Save provides a mock function with given fields: ctx, s
func (_m *Scheduler) Save(ctx context.Context, s *domain.Scheduler) error {
	ret := _m.Called(ctx, s)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Scheduler) error); ok {
		r0 = rf(ctx, s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Scheduler_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type Scheduler_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//  - ctx context.Context
//  - s *domain.Scheduler
func (_e *Scheduler_Expecter) Save(ctx interface{}, s interface{}) *Scheduler_Save_Call {
	return &Scheduler_Save_Call{Call: _e.mock.On("Save", ctx, s)}
}

func (_c *Scheduler_Save_Call) Run(run func(ctx context.Context, s *domain.Scheduler)) *Scheduler_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Scheduler))
	})
	return _c
}

func (_c *Scheduler_Save_Call) Return(_a0 error) *Scheduler_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

// Update provides a mock function with given fields: ctx, s
func (_m *Scheduler) Update(ctx context.Context, s *domain.Scheduler) error {
	ret := _m.Called(ctx, s)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Scheduler) error); ok {
		r0 = rf(ctx, s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Scheduler_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type Scheduler_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//  - ctx context.Context
//  - s *domain.Scheduler
func (_e *Scheduler_Expecter) Update(ctx interface{}, s interface{}) *Scheduler_Update_Call {
	return &Scheduler_Update_Call{Call: _e.mock.On("Update", ctx, s)}
}

func (_c *Scheduler_Update_Call) Run(run func(ctx context.Context, s *domain.Scheduler)) *Scheduler_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Scheduler))
	})
	return _c
}

func (_c *Scheduler_Update_Call) Return(_a0 error) *Scheduler_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewScheduler interface {
	mock.TestingT
	Cleanup(func())
}

// NewScheduler creates a new instance of Scheduler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewScheduler(t mockConstructorTestingTNewScheduler) *Scheduler {
	mock := &Scheduler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
